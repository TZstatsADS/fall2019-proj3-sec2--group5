read.csv('../data/dat_test_dist_angle_area.csv')
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
if(!require("R.matlab")){
install.packages("R.matlab")
}
if(!require("readxl")){
install.packages("readxl")
}
if(!require("dplyr")){
install.packages("dplyr")
}
if(!require("readxl")){
install.packages("readxl")
}
if(!require("ggplot2")){
install.packages("ggplot2")
}
if(!require("caret")){
install.packages("caret")
}
library(R.matlab)
library(readxl)
library(dplyr)
library(EBImage)
library(ggplot2)
library(caret)
train_dir <- "../data/train_set/" # This will be modified for different data sets.
train_image_dir <- paste(train_dir, "images/", sep="")
train_pt_dir <- paste(train_dir,  "points/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
#train-test split
info <- read.csv(train_label_path)
n <- nrow(info)
n_train <- round(n*(4/5), 0)
train_idx <- sample(info$Index, n_train, replace = F)
test_idx <- setdiff(info$Index,train_idx)
read.csv('../data/dat_test_dist_angle_area.csv')
wd()
setwd("~/fall2019-proj3-sec2--group5/doc")
set.seed(0)
gmb.fit<-readRDS('../doc/gbm.RDSdata)
gmb.fit<-readRDS('../doc/gbm.RDSdata')
gmb.fit<-readRDS('../doc/gbm.RDSdata')
setwd("~/Desktop/fall2019-proj3-sec2--group5/doc")
gmb.fit<-readRDS('../doc/gbm.RDSdata')
gmb.fit<-readRDS('../doc/gbm.RDS')
gmb.fit
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
if(!require("R.matlab")){
install.packages("R.matlab")
}
if(!require("readxl")){
install.packages("readxl")
}
if(!require("dplyr")){
install.packages("dplyr")
}
if(!require("readxl")){
install.packages("readxl")
}
if(!require("ggplot2")){
install.packages("ggplot2")
}
if(!require("caret")){
install.packages("caret")
}
library(R.matlab)
library(readxl)
library(dplyr)
library(EBImage)
library(ggplot2)
library(caret)
set.seed(0)
train_dir <- "../data/train_set/" # This will be modified for different data sets.
train_image_dir <- paste(train_dir, "images/", sep="")
train_pt_dir <- paste(train_dir,  "points/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
#train-test split
info <- read.csv(train_label_path)
n <- nrow(info)
n_train <- round(n*(4/5), 0)
train_idx <- sample(info$Index, n_train, replace = F)
test_idx <- setdiff(info$Index,train_idx)
n_files <- length(list.files(train_image_dir))
#function to read fiducial points
#input: index
#output: matrix of fiducial points corresponding to the index
readMat.matrix <- function(index){
return(round(readMat(paste0(train_pt_dir, sprintf("%04d", index), ".mat"))[[1]],0))
}
#load fiducial points
fiducial_pt_list <- lapply(1:n_files, readMat.matrix)
save(fiducial_pt_list, file="../output/fiducial_pt_list.RData")
source("../lib/feature_full.R")
source("../lib/feature_reduced.R")
tm_feature_full_train <- NA
tm_feature_full_train <- system.time(dat_train_full <- feature_full(fiducial_pt_list, train_idx))
tm_feature_full_test <- NA
tm_feature_full_test <- system.time(dat_test_full <- feature(fiducial_pt_list, test_idx))
tm_feature_full_test <- system.time(dat_test_full <- feature_full(fiducial_pt_list, test_idx))
tm_feature_reduced_train <- NA
tm_feature_reduced_train <- system.time(dat_train_reduced <- feature_reduced(fiducial_pt_list, train_idx))
tm_feature_reduced_train <- system.time(dat_train_reduced <- feature_reduced(fiducial_pt_list, train_idx))
tm_feature_reduced_train <- NA
tm_feature_reduced_train <- system.time(dat_train_reduced <- feature_reduced(fiducial_pt_list, train_idx))
source("../lib/feature_reduced.R")
source("../lib/feature_full.R")
tm_feature_reduced_train <- system.time(dat_train_reduced <- feature_reduced(fiducial_pt_list, train_idx))
tm_feature_reduced_test <- NA
tm_feature_reduced_test <- system.time(dat_test_reduced <- feature_reduced(fiducial_pt_list, test_idx))
###Traing
gbm.fit<-gbm_train(dat_train_full)
source("../lib/gbm_train.R")
source("../lib/gbm_test.R")
###Traing
gbm.fit<-gbm_train(dat_train_full)
install.packages('gbm')
source("../lib/gbm_train.R")
source("../lib/gbm_test.R")
###Traing
gbm.fit<-gbm_train(dat_train_full)
